{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\kmulq\\\\Desktop\\\\code\\\\pokedex\\\\src\\\\pages\\\\HomePage\\\\HomePage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport List from \"../../components/List\";\n\nconst HomePage = () => {\n  _s();\n\n  // Set pokemonList state and declare it as an empty array\n  const [pokemonList, setPokemonList] = useState([]); // Set search state and declare it as an empty string\n\n  const [search, setSearch] = useState(\"\"); // Set filteredPokemonList state and declare it as an empty array\n\n  const [filteredPokemonList, setFilteredPokemonList] = useState([]); // Initialize pokemonTypes and declare it as an array with the 15 types of pokemon\n\n  const pokemonTypes = [\"Bug\", \"Dragon\", \"Electric\", \"Fighting\", \"Fire\", \"Flying\", \"Ghost\", \"Grass\", \"Ground\", \"Ice\", \"Normal\", \"Poison\", \"Psychic\", \"Rock\", \"Water\"]; // Set state for type checkboxes by using reduce on the pokemonTypes array to turn each type into an object with the type name for the key and false for the value\n\n  const [typeChecked, setTypeChecked] = useState(pokemonTypes.reduce((types, acc) => ({ ...types,\n    [acc]: false\n  }), {})); // Set state for weaknesses checkboxes by using reduce on the pokemonTypes array to turn each weaknesses into an object with the weaknesses name for the key and false for the value\n\n  const [weaknessesChecked, setWeaknessesChecked] = useState(pokemonTypes.reduce((types, acc) => ({ ...types,\n    [acc]: false\n  }), {})); // Function to fetch list of pokemon & set the pokemonList state to the response data\n\n  const fetchPokemon = async () => {\n    const res = await axios.get(\"https://raw.githubusercontent.com/Biuni/PokemonGO-Pokedex/master/pokedex.json\");\n    setPokemonList(res.data.pokemon);\n  }; // Function to display search results\n\n\n  const searchPokemonHandler = e => {\n    // Prevent default submission behavior (page reload)\n    e.preventDefault(); // Declare a searchResult variable and assign it to the result of the find method\n\n    const searchResult = pokemonList.find(pokemon => pokemon.name.toLowerCase() === search.toLowerCase()); // If a result was found update the list to only include the result, else re-populate pokemon list\n\n    if (searchResult) {\n      setPokemonList([searchResult]);\n    } else {\n      fetchPokemon();\n    }\n  }; // Function to reset search\n\n\n  const searchResetHandler = () => {\n    // Clear search field\n    setSearch(\"\"); // Re-populate list of pokemon\n\n    fetchPokemon();\n  }; // Function to filter pokemon\n\n\n  const filterPokemonTypeHandler = e => {\n    // Prevent default submission behavior (page reload)\n    e.preventDefault(); // Initialize a variable to store the types that are true from the typeChecked state\n\n    const typeFilters = []; // Loop over the properties in the typeChecked state and add the types that evaluate to true to the typeFilters array\n\n    for (const type in typeChecked) {\n      if (typeChecked[type] === true) {\n        typeFilters.push(type);\n      }\n    } // Check that filters exist\n\n\n    if (typeFilters.length) {\n      // Function to compare 2 arrays for the same content\n      const isSame = (arr1, arr2) => arr1.length === arr2.length && arr1.every((value, idx) => value === arr2[idx]); // Filter the pokemonList to return any pokemon whose types meet the filter requirements\n\n\n      const filterResults = pokemonList.filter(pokemon => isSame(pokemon.type.sort(), typeFilters.sort())); // Update list to show filter results if any exist\n\n      if (filterResults.length) {\n        setFilteredPokemonList(filterResults);\n      } else {\n        fetchPokemon();\n      }\n    } else {\n      setFilteredPokemonList([]);\n    }\n  }; // Function to handle type filter checkbox changes\n\n\n  const typeCheckboxHandler = e => {\n    // Set typeChecked state to maintain all of it's current values except where the key is equal to e.target.name, in which case it will toggle the value\n    setTypeChecked({ ...typeChecked,\n      [e.target.name]: !typeChecked[e.target.name]\n    });\n  }; // Function to handle type filter checkbox changes\n\n\n  const weaknessesCheckboxHandler = e => {\n    // Set typeChecked state to maintain all of it's current values except where the key is equal to e.target.name, in which case it will toggle the value\n    setWeaknessesChecked({ ...weaknessesChecked,\n      [e.target.name]: !weaknessesChecked[e.target.name]\n    });\n  }; // If the pokemonList state is an empty array, run the fetchPokemon function\n\n\n  useEffect(() => {\n    if (!pokemonList.length) {\n      fetchPokemon();\n    }\n  }, [pokemonList]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Home Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Search by Pokemon Name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: searchPokemonHandler,\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"formSearch\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Pokemon Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"text\",\n          placeholder: \"Enter Pokemon Name...\",\n          onChange: e => setSearch(e.target.value),\n          value: search\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        type: \"submit\",\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        type: \"button\",\n        onClick: searchResetHandler,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Filter Pokemon Type\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: filterPokemonTypeHandler,\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"formTypeFilterCheckbox\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Type: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this), pokemonTypes.map((type, idx) => /*#__PURE__*/_jsxDEV(Form.Check, {\n          type: \"checkbox\",\n          label: type,\n          name: type,\n          checked: typeChecked[type],\n          onChange: typeCheckboxHandler\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        type: \"submit\",\n        children: \"Apply Filter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Filter Pokemon Weaknesses\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: filterPokemonWeaknessesHandler,\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"formWeaknessesFilterCheckbox\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Weaknesses: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this), pokemonTypes.map((type, idx) => /*#__PURE__*/_jsxDEV(Form.Check, {\n          type: \"checkbox\",\n          label: type,\n          name: type,\n          checked: weaknessesChecked[type],\n          onChange: weaknessesCheckboxHandler\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        type: \"submit\",\n        children: \"Apply Filter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      pokemonList: filteredPokemonList.length ? filteredPokemonList : pokemonList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(HomePage, \"BymJ1RMgl7cVGa+k0i9BslcjUTA=\");\n\n_c = HomePage;\nexport default HomePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"sources":["C:/Users/kmulq/Desktop/code/pokedex/src/pages/HomePage/HomePage.js"],"names":["React","useEffect","useState","axios","Form","Button","List","HomePage","pokemonList","setPokemonList","search","setSearch","filteredPokemonList","setFilteredPokemonList","pokemonTypes","typeChecked","setTypeChecked","reduce","types","acc","weaknessesChecked","setWeaknessesChecked","fetchPokemon","res","get","data","pokemon","searchPokemonHandler","e","preventDefault","searchResult","find","name","toLowerCase","searchResetHandler","filterPokemonTypeHandler","typeFilters","type","push","length","isSame","arr1","arr2","every","value","idx","filterResults","filter","sort","typeCheckboxHandler","target","weaknessesCheckboxHandler","map","filterPokemonWeaknessesHandler"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport List from \"../../components/List\";\r\n\r\nconst HomePage = () => {\r\n  // Set pokemonList state and declare it as an empty array\r\n  const [pokemonList, setPokemonList] = useState([]);\r\n  // Set search state and declare it as an empty string\r\n  const [search, setSearch] = useState(\"\");\r\n  // Set filteredPokemonList state and declare it as an empty array\r\n  const [filteredPokemonList, setFilteredPokemonList] = useState([]);\r\n  // Initialize pokemonTypes and declare it as an array with the 15 types of pokemon\r\n  const pokemonTypes = [\r\n    \"Bug\",\r\n    \"Dragon\",\r\n    \"Electric\",\r\n    \"Fighting\",\r\n    \"Fire\",\r\n    \"Flying\",\r\n    \"Ghost\",\r\n    \"Grass\",\r\n    \"Ground\",\r\n    \"Ice\",\r\n    \"Normal\",\r\n    \"Poison\",\r\n    \"Psychic\",\r\n    \"Rock\",\r\n    \"Water\",\r\n  ];\r\n  // Set state for type checkboxes by using reduce on the pokemonTypes array to turn each type into an object with the type name for the key and false for the value\r\n  const [typeChecked, setTypeChecked] = useState(\r\n    pokemonTypes.reduce(\r\n      (types, acc) => ({\r\n        ...types,\r\n        [acc]: false,\r\n      }),\r\n      {}\r\n    )\r\n  );\r\n  // Set state for weaknesses checkboxes by using reduce on the pokemonTypes array to turn each weaknesses into an object with the weaknesses name for the key and false for the value\r\n  const [weaknessesChecked, setWeaknessesChecked] = useState(\r\n    pokemonTypes.reduce(\r\n      (types, acc) => ({\r\n        ...types,\r\n        [acc]: false,\r\n      }),\r\n      {}\r\n    )\r\n  );\r\n\r\n  // Function to fetch list of pokemon & set the pokemonList state to the response data\r\n  const fetchPokemon = async () => {\r\n    const res = await axios.get(\r\n      \"https://raw.githubusercontent.com/Biuni/PokemonGO-Pokedex/master/pokedex.json\"\r\n    );\r\n    setPokemonList(res.data.pokemon);\r\n  };\r\n\r\n  // Function to display search results\r\n  const searchPokemonHandler = (e) => {\r\n    // Prevent default submission behavior (page reload)\r\n    e.preventDefault();\r\n\r\n    // Declare a searchResult variable and assign it to the result of the find method\r\n    const searchResult = pokemonList.find(\r\n      (pokemon) => pokemon.name.toLowerCase() === search.toLowerCase()\r\n    );\r\n\r\n    // If a result was found update the list to only include the result, else re-populate pokemon list\r\n    if (searchResult) {\r\n      setPokemonList([searchResult]);\r\n    } else {\r\n      fetchPokemon();\r\n    }\r\n  };\r\n\r\n  // Function to reset search\r\n  const searchResetHandler = () => {\r\n    // Clear search field\r\n    setSearch(\"\");\r\n    // Re-populate list of pokemon\r\n    fetchPokemon();\r\n  };\r\n\r\n  // Function to filter pokemon\r\n  const filterPokemonTypeHandler = (e) => {\r\n    // Prevent default submission behavior (page reload)\r\n    e.preventDefault();\r\n\r\n    // Initialize a variable to store the types that are true from the typeChecked state\r\n    const typeFilters = [];\r\n    // Loop over the properties in the typeChecked state and add the types that evaluate to true to the typeFilters array\r\n    for (const type in typeChecked) {\r\n      if (typeChecked[type] === true) {\r\n        typeFilters.push(type);\r\n      }\r\n    }\r\n\r\n    // Check that filters exist\r\n    if (typeFilters.length) {\r\n      // Function to compare 2 arrays for the same content\r\n      const isSame = (arr1, arr2) =>\r\n        arr1.length === arr2.length &&\r\n        arr1.every((value, idx) => value === arr2[idx]);\r\n\r\n      // Filter the pokemonList to return any pokemon whose types meet the filter requirements\r\n      const filterResults = pokemonList.filter((pokemon) =>\r\n        isSame(pokemon.type.sort(), typeFilters.sort())\r\n      );\r\n\r\n      // Update list to show filter results if any exist\r\n      if (filterResults.length) {\r\n        setFilteredPokemonList(filterResults);\r\n      } else {\r\n        fetchPokemon();\r\n      }\r\n    } else {\r\n      setFilteredPokemonList([]);\r\n    }\r\n  };\r\n\r\n  // Function to handle type filter checkbox changes\r\n  const typeCheckboxHandler = (e) => {\r\n    // Set typeChecked state to maintain all of it's current values except where the key is equal to e.target.name, in which case it will toggle the value\r\n    setTypeChecked({\r\n      ...typeChecked,\r\n      [e.target.name]: !typeChecked[e.target.name],\r\n    });\r\n  };\r\n\r\n  // Function to handle type filter checkbox changes\r\n  const weaknessesCheckboxHandler = (e) => {\r\n    // Set typeChecked state to maintain all of it's current values except where the key is equal to e.target.name, in which case it will toggle the value\r\n    setWeaknessesChecked({\r\n      ...weaknessesChecked,\r\n      [e.target.name]: !weaknessesChecked[e.target.name],\r\n    });\r\n  };\r\n\r\n  // If the pokemonList state is an empty array, run the fetchPokemon function\r\n  useEffect(() => {\r\n    if (!pokemonList.length) {\r\n      fetchPokemon();\r\n    }\r\n  }, [pokemonList]);\r\n  return (\r\n    <>\r\n      <h1>Home Page</h1>\r\n      <h3>Search by Pokemon Name</h3>\r\n      <Form onSubmit={searchPokemonHandler}>\r\n        <Form.Group controlId=\"formSearch\">\r\n          <Form.Label>Pokemon Name</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"Enter Pokemon Name...\"\r\n            onChange={(e) => setSearch(e.target.value)}\r\n            value={search}\r\n          />\r\n        </Form.Group>\r\n\r\n        <Button variant=\"primary\" type=\"submit\">\r\n          Search\r\n        </Button>\r\n        <Button variant=\"primary\" type=\"button\" onClick={searchResetHandler}>\r\n          Reset\r\n        </Button>\r\n      </Form>\r\n      <h3>Filter Pokemon Type</h3>\r\n      <Form onSubmit={filterPokemonTypeHandler}>\r\n        <Form.Group controlId=\"formTypeFilterCheckbox\">\r\n          <Form.Label>Type: </Form.Label>\r\n          {pokemonTypes.map((type, idx) => (\r\n            <Form.Check\r\n              key={idx}\r\n              type=\"checkbox\"\r\n              label={type}\r\n              name={type}\r\n              checked={typeChecked[type]}\r\n              onChange={typeCheckboxHandler}\r\n            />\r\n          ))}\r\n        </Form.Group>\r\n        <Button variant=\"primary\" type=\"submit\">\r\n          Apply Filter\r\n        </Button>\r\n      </Form>\r\n      <h3>Filter Pokemon Weaknesses</h3>\r\n      <Form onSubmit={filterPokemonWeaknessesHandler}>\r\n        <Form.Group controlId=\"formWeaknessesFilterCheckbox\">\r\n          <Form.Label>Weaknesses: </Form.Label>\r\n          {pokemonTypes.map((type, idx) => (\r\n            <Form.Check\r\n              key={idx}\r\n              type=\"checkbox\"\r\n              label={type}\r\n              name={type}\r\n              checked={weaknessesChecked[type]}\r\n              onChange={weaknessesCheckboxHandler}\r\n            />\r\n          ))}\r\n        </Form.Group>\r\n        <Button variant=\"primary\" type=\"submit\">\r\n          Apply Filter\r\n        </Button>\r\n      </Form>\r\n      <List\r\n        pokemonList={\r\n          filteredPokemonList.length ? filteredPokemonList : pokemonList\r\n        }\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n"]},"metadata":{},"sourceType":"module"}