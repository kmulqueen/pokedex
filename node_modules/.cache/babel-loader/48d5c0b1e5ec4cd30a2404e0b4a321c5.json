{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\kmulq\\\\Desktop\\\\code\\\\pokedex\\\\src\\\\pages\\\\HomePage\\\\HomePage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport List from \"../../components/List\";\n\nconst HomePage = () => {\n  _s();\n\n  // Set pokemonList state and declare it as an empty array\n  const [pokemonList, setPokemonList] = useState([]); // Set search state and declare it as an empty string\n\n  const [search, setSearch] = useState(\"\"); // Set types state and declare it as an array with the 15 types of pokemon\n\n  const [pokemonTypes, setPokemonTypes] = useState([\"Bug\", \"Dragon\", \"Electric\", \"Fighting\", \"Fire\", \"Flying\", \"Ghost\", \"Grass\", \"Ground\", \"Ice\", \"Normal\", \"Poison\", \"Psychic\", \"Rock\", \"Water\"]); // Set state for type checkboxes by using reduce on the pokemonTypes array to turn each type into an object with the type name for the key and false for the value\n\n  const [typeChecked, setTypeChecked] = useState(pokemonTypes.reduce((types, acc) => ({ ...types,\n    [acc]: false\n  }), {})); // Function to fetch list of pokemon & set the pokemonList state to the response data\n\n  const fetchPokemon = async () => {\n    const res = await axios.get(\"https://raw.githubusercontent.com/Biuni/PokemonGO-Pokedex/master/pokedex.json\");\n    setPokemonList(res.data.pokemon);\n  }; // Function to display search results\n\n\n  const searchPokemonHandler = e => {\n    // Prevent default submission behavior (page reload)\n    e.preventDefault(); // Declare a searchResult variable and assign it to the result of the find method\n\n    const searchResult = pokemonList.find(pokemon => pokemon.name.toLowerCase() === search.toLowerCase()); // If a result was found update the list to only include the result, else re-populate pokemon list\n\n    if (searchResult) {\n      setPokemonList([searchResult]);\n    } else {\n      fetchPokemon();\n    }\n  }; // Function to reset search\n\n\n  const searchResetHandler = () => {\n    // Clear search field\n    setSearch(\"\"); // Re-populate list of pokemon\n\n    fetchPokemon();\n  }; // Function to filter pokemon\n\n\n  const filterPokemonHandler = e => {\n    // Prevent default submission behavior (page reload)\n    e.preventDefault();\n  };\n\n  const checkboxHandler = e => {}; // If the pokemonList state is an empty array, run the fetchPokemon function\n\n\n  useEffect(() => {\n    if (!pokemonList.length) {\n      fetchPokemon();\n    }\n  }, [pokemonList]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Home Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Search by Pokemon Name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: searchPokemonHandler,\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"formSearch\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Pokemon Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"text\",\n          placeholder: \"Enter Pokemon Name...\",\n          onChange: e => setSearch(e.target.value),\n          value: search\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        type: \"submit\",\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        type: \"button\",\n        onClick: searchResetHandler,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Filter Pokemon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: filterPokemonHandler,\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"formTypeFilterCheckbox\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Type: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this), pokemonTypes.map((type, idx) => /*#__PURE__*/_jsxDEV(Form.Check, {\n          type: \"checkbox\",\n          label: type,\n          name: type,\n          checked: true\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        type: \"submit\",\n        children: \"Apply Filter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      pokemonList: pokemonList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(HomePage, \"Gzf/oU5accmBVAhGthVk4omAsIo=\");\n\n_c = HomePage;\nexport default HomePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"sources":["C:/Users/kmulq/Desktop/code/pokedex/src/pages/HomePage/HomePage.js"],"names":["React","useEffect","useState","axios","Form","Button","List","HomePage","pokemonList","setPokemonList","search","setSearch","pokemonTypes","setPokemonTypes","typeChecked","setTypeChecked","reduce","types","acc","fetchPokemon","res","get","data","pokemon","searchPokemonHandler","e","preventDefault","searchResult","find","name","toLowerCase","searchResetHandler","filterPokemonHandler","checkboxHandler","length","target","value","map","type","idx"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport List from \"../../components/List\";\r\n\r\nconst HomePage = () => {\r\n  // Set pokemonList state and declare it as an empty array\r\n  const [pokemonList, setPokemonList] = useState([]);\r\n  // Set search state and declare it as an empty string\r\n  const [search, setSearch] = useState(\"\");\r\n  // Set types state and declare it as an array with the 15 types of pokemon\r\n  const [pokemonTypes, setPokemonTypes] = useState([\r\n    \"Bug\",\r\n    \"Dragon\",\r\n    \"Electric\",\r\n    \"Fighting\",\r\n    \"Fire\",\r\n    \"Flying\",\r\n    \"Ghost\",\r\n    \"Grass\",\r\n    \"Ground\",\r\n    \"Ice\",\r\n    \"Normal\",\r\n    \"Poison\",\r\n    \"Psychic\",\r\n    \"Rock\",\r\n    \"Water\",\r\n  ]);\r\n  // Set state for type checkboxes by using reduce on the pokemonTypes array to turn each type into an object with the type name for the key and false for the value\r\n  const [typeChecked, setTypeChecked] = useState(\r\n    pokemonTypes.reduce(\r\n      (types, acc) => ({\r\n        ...types,\r\n        [acc]: false,\r\n      }),\r\n      {}\r\n    )\r\n  );\r\n\r\n  // Function to fetch list of pokemon & set the pokemonList state to the response data\r\n  const fetchPokemon = async () => {\r\n    const res = await axios.get(\r\n      \"https://raw.githubusercontent.com/Biuni/PokemonGO-Pokedex/master/pokedex.json\"\r\n    );\r\n    setPokemonList(res.data.pokemon);\r\n  };\r\n\r\n  // Function to display search results\r\n  const searchPokemonHandler = (e) => {\r\n    // Prevent default submission behavior (page reload)\r\n    e.preventDefault();\r\n\r\n    // Declare a searchResult variable and assign it to the result of the find method\r\n    const searchResult = pokemonList.find(\r\n      (pokemon) => pokemon.name.toLowerCase() === search.toLowerCase()\r\n    );\r\n\r\n    // If a result was found update the list to only include the result, else re-populate pokemon list\r\n    if (searchResult) {\r\n      setPokemonList([searchResult]);\r\n    } else {\r\n      fetchPokemon();\r\n    }\r\n  };\r\n\r\n  // Function to reset search\r\n  const searchResetHandler = () => {\r\n    // Clear search field\r\n    setSearch(\"\");\r\n    // Re-populate list of pokemon\r\n    fetchPokemon();\r\n  };\r\n\r\n  // Function to filter pokemon\r\n  const filterPokemonHandler = (e) => {\r\n    // Prevent default submission behavior (page reload)\r\n    e.preventDefault();\r\n  };\r\n\r\n  const checkboxHandler = (e) => {};\r\n\r\n  // If the pokemonList state is an empty array, run the fetchPokemon function\r\n  useEffect(() => {\r\n    if (!pokemonList.length) {\r\n      fetchPokemon();\r\n    }\r\n  }, [pokemonList]);\r\n  return (\r\n    <>\r\n      <h1>Home Page</h1>\r\n      <h3>Search by Pokemon Name</h3>\r\n      <Form onSubmit={searchPokemonHandler}>\r\n        <Form.Group controlId=\"formSearch\">\r\n          <Form.Label>Pokemon Name</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"Enter Pokemon Name...\"\r\n            onChange={(e) => setSearch(e.target.value)}\r\n            value={search}\r\n          />\r\n        </Form.Group>\r\n\r\n        <Button variant=\"primary\" type=\"submit\">\r\n          Search\r\n        </Button>\r\n        <Button variant=\"primary\" type=\"button\" onClick={searchResetHandler}>\r\n          Reset\r\n        </Button>\r\n      </Form>\r\n      <h3>Filter Pokemon</h3>\r\n      <Form onSubmit={filterPokemonHandler}>\r\n        <Form.Group controlId=\"formTypeFilterCheckbox\">\r\n          <Form.Label>Type: </Form.Label>\r\n          {pokemonTypes.map((type, idx) => (\r\n            <Form.Check\r\n              key={idx}\r\n              type=\"checkbox\"\r\n              label={type}\r\n              name={type}\r\n              checked={true}\r\n            />\r\n          ))}\r\n        </Form.Group>\r\n        <Button variant=\"primary\" type=\"submit\">\r\n          Apply Filter\r\n        </Button>\r\n      </Form>\r\n      <List pokemonList={pokemonList} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n"]},"metadata":{},"sourceType":"module"}