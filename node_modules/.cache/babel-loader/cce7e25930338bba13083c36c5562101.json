{"ast":null,"code":"import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import _regeneratorRuntime from\"C:/Users/kmulq/Desktop/code/pokedex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/kmulq/Desktop/code/pokedex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _defineProperty from\"C:/Users/kmulq/Desktop/code/pokedex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"C:/Users/kmulq/Desktop/code/pokedex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"C:/Users/kmulq/Desktop/code/pokedex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from\"react\";import axios from\"axios\";import Row from\"react-bootstrap/Row\";import Col from\"react-bootstrap/Col\";import Form from\"react-bootstrap/Form\";import Button from\"react-bootstrap/Button\";import List from\"../../components/List\";var HomePage=function HomePage(){// Set pokemonList state and declare it as an empty array\nvar _useState=useState([]),_useState2=_slicedToArray(_useState,2),pokemonList=_useState2[0],setPokemonList=_useState2[1];// Set search state and declare it as an empty string\nvar _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),search=_useState4[0],setSearch=_useState4[1];// Set filteredPokemonList state and declare it as an empty array\nvar _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),filteredPokemonList=_useState6[0],setFilteredPokemonList=_useState6[1];// Initialize pokemonTypes and declare it as an array with the 15 types of pokemon\nvar pokemonTypes=[\"Bug\",\"Dragon\",\"Electric\",\"Fighting\",\"Fire\",\"Flying\",\"Ghost\",\"Grass\",\"Ground\",\"Ice\",\"Normal\",\"Poison\",\"Psychic\",\"Rock\",\"Water\"];// Set state for type checkboxes by using reduce on the pokemonTypes array to turn each type into an object with the type name for the key and false for the value\nvar _useState7=useState(pokemonTypes.reduce(function(types,acc){return _objectSpread(_objectSpread({},types),{},_defineProperty({},acc,false));},{})),_useState8=_slicedToArray(_useState7,2),typeChecked=_useState8[0],setTypeChecked=_useState8[1];// Set state for weaknesses checkboxes by using reduce on the pokemonTypes array to turn each weaknesses into an object with the weaknesses name for the key and false for the value\nvar _useState9=useState(pokemonTypes.reduce(function(types,acc){return _objectSpread(_objectSpread({},types),{},_defineProperty({},acc,false));},{})),_useState10=_slicedToArray(_useState9,2),weaknessesChecked=_useState10[0],setWeaknessesChecked=_useState10[1];// Function to fetch list of pokemon & set the pokemonList state to the response data\nvar fetchPokemon=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var res;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return axios.get(\"https://raw.githubusercontent.com/Biuni/PokemonGO-Pokedex/master/pokedex.json\");case 2:res=_context.sent;setPokemonList(res.data.pokemon);case 4:case\"end\":return _context.stop();}}},_callee);}));return function fetchPokemon(){return _ref.apply(this,arguments);};}();// Function to display search results\nvar searchPokemonHandler=function searchPokemonHandler(e){// Prevent default submission behavior (page reload)\ne.preventDefault();// Declare a searchResult variable and assign it to the result of the find method\nvar searchResult=pokemonList.find(function(pokemon){return pokemon.name.toLowerCase()===search.toLowerCase();});// If a result was found update the list to only include the result, else re-populate pokemon list\nif(searchResult){setPokemonList([searchResult]);}else{fetchPokemon();}};// Function to reset search\nvar searchResetHandler=function searchResetHandler(){// Clear search field\nsetSearch(\"\");// Re-populate list of pokemon\nfetchPokemon();};// Function to filter pokemon\nvar filterPokemonHandler=function filterPokemonHandler(e){// Prevent default submission behavior (page reload)\ne.preventDefault();// Initialize a variable to store the types that are true from the typeChecked state\nvar typeFilters=[];// Loop over the properties in the typeChecked state and add the types that evaluate to true to the typeFilters array\nfor(var type in typeChecked){if(typeChecked[type]===true){typeFilters.push(type);}}// Initialize a variable to store the weaknessess that are true from the weaknessesChecked state\nvar weaknessesFilters=[];// Loop over the properties in the weaknessesChecked state and add the weaknessess that evaluate to true to the weaknessesFilters array\nfor(var weaknesses in weaknessesChecked){if(weaknessesChecked[weaknesses]===true){weaknessesFilters.push(weaknesses);}}// Check that filters exist\nif(typeFilters.length||weaknessesFilters.length){// Function to compare 2 arrays for the same content\nvar isSame=function isSame(arr1,arr2){return arr1.length===arr2.length&&arr1.every(function(value,idx){return value===arr2[idx];});};// Filter the pokemonList to return any pokemon whose types/weaknesses meet the filter requirements\nvar filterResults=pokemonList.filter(function(pokemon){var res;if(typeFilters.length&&weaknessesFilters.length){res=(isSame(pokemon.type.sort(),typeFilters.sort()),isSame(pokemon.weaknesses.sort(),weaknessesFilters.sort()));}else if(typeFilters.length&&!weaknessesFilters.length){res=isSame(pokemon.type.sort(),typeFilters.sort());}else if(!typeFilters.length&&weaknessesFilters.length){res=isSame(pokemon.weaknesses.sort(),weaknessesFilters.sort());}return res;});// Update list to show filter results if any exist\nif(filterResults.length){setFilteredPokemonList(filterResults);}else{fetchPokemon();}}else{setFilteredPokemonList([]);}};// Function to handle type filter checkbox changes\nvar typeCheckboxHandler=function typeCheckboxHandler(e){// Set typeChecked state to maintain all of it's current values except where the key is equal to e.target.name, in which case it will toggle the value\nsetTypeChecked(_objectSpread(_objectSpread({},typeChecked),{},_defineProperty({},e.target.name,!typeChecked[e.target.name])));};// Function to handle type filter checkbox changes\nvar weaknessesCheckboxHandler=function weaknessesCheckboxHandler(e){// Set typeChecked state to maintain all of it's current values except where the key is equal to e.target.name, in which case it will toggle the value\nsetWeaknessesChecked(_objectSpread(_objectSpread({},weaknessesChecked),{},_defineProperty({},e.target.name,!weaknessesChecked[e.target.name])));};// If the pokemonList state is an empty array, run the fetchPokemon function\nuseEffect(function(){if(!pokemonList.length){fetchPokemon();}},[pokemonList]);return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Search by Pokemon Name\"}),/*#__PURE__*/_jsx(Form,{onSubmit:searchPokemonHandler,children:/*#__PURE__*/_jsxs(Row,{children:[/*#__PURE__*/_jsx(Col,{children:/*#__PURE__*/_jsxs(Form.Group,{controlId:\"formSearch\",children:[/*#__PURE__*/_jsx(Form.Label,{children:\"Pokemon Name\"}),/*#__PURE__*/_jsx(Form.Control,{type:\"text\",placeholder:\"Enter Pokemon Name...\",onChange:function onChange(e){return setSearch(e.target.value);},value:search})]})}),/*#__PURE__*/_jsx(Button,{variant:\"primary\",type:\"submit\",children:\"Search\"}),/*#__PURE__*/_jsx(Button,{variant:\"primary\",type:\"button\",onClick:searchResetHandler,children:\"Reset\"})]})}),/*#__PURE__*/_jsxs(Row,{children:[/*#__PURE__*/_jsxs(Col,{children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Filter Pokemon Type\"}),/*#__PURE__*/_jsxs(Form,{onSubmit:filterPokemonHandler,children:[/*#__PURE__*/_jsxs(Form.Group,{controlId:\"formTypeFilterCheckbox\",children:[/*#__PURE__*/_jsx(Form.Label,{children:\"Type: \"}),pokemonTypes.map(function(type,idx){return/*#__PURE__*/_jsx(Form.Check,{type:\"checkbox\",label:type,name:type,checked:typeChecked[type],onChange:typeCheckboxHandler},idx);})]}),/*#__PURE__*/_jsx(Button,{variant:\"primary\",type:\"submit\",children:\"Apply Filter\"})]})]}),/*#__PURE__*/_jsxs(Col,{children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Filter Pokemon Weaknesses\"}),/*#__PURE__*/_jsxs(Form,{onSubmit:filterPokemonHandler,children:[/*#__PURE__*/_jsxs(Form.Group,{controlId:\"formWeaknessesFilterCheckbox\",children:[/*#__PURE__*/_jsx(Form.Label,{children:\"Weaknesses: \"}),pokemonTypes.map(function(type,idx){return/*#__PURE__*/_jsx(Form.Check,{type:\"checkbox\",label:type,name:type,checked:weaknessesChecked[type],onChange:weaknessesCheckboxHandler},idx);})]}),/*#__PURE__*/_jsx(Button,{variant:\"primary\",type:\"submit\",children:\"Apply Filter\"})]})]})]}),/*#__PURE__*/_jsx(List,{pokemonList:filteredPokemonList.length?filteredPokemonList:pokemonList})]});};export default HomePage;","map":{"version":3,"sources":["C:/Users/kmulq/Desktop/code/pokedex/src/pages/HomePage/HomePage.js"],"names":["React","useEffect","useState","axios","Row","Col","Form","Button","List","HomePage","pokemonList","setPokemonList","search","setSearch","filteredPokemonList","setFilteredPokemonList","pokemonTypes","reduce","types","acc","typeChecked","setTypeChecked","weaknessesChecked","setWeaknessesChecked","fetchPokemon","get","res","data","pokemon","searchPokemonHandler","e","preventDefault","searchResult","find","name","toLowerCase","searchResetHandler","filterPokemonHandler","typeFilters","type","push","weaknessesFilters","weaknesses","length","isSame","arr1","arr2","every","value","idx","filterResults","filter","sort","typeCheckboxHandler","target","weaknessesCheckboxHandler","map"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport List from \"../../components/List\";\r\n\r\nconst HomePage = () => {\r\n  // Set pokemonList state and declare it as an empty array\r\n  const [pokemonList, setPokemonList] = useState([]);\r\n  // Set search state and declare it as an empty string\r\n  const [search, setSearch] = useState(\"\");\r\n  // Set filteredPokemonList state and declare it as an empty array\r\n  const [filteredPokemonList, setFilteredPokemonList] = useState([]);\r\n  // Initialize pokemonTypes and declare it as an array with the 15 types of pokemon\r\n  const pokemonTypes = [\r\n    \"Bug\",\r\n    \"Dragon\",\r\n    \"Electric\",\r\n    \"Fighting\",\r\n    \"Fire\",\r\n    \"Flying\",\r\n    \"Ghost\",\r\n    \"Grass\",\r\n    \"Ground\",\r\n    \"Ice\",\r\n    \"Normal\",\r\n    \"Poison\",\r\n    \"Psychic\",\r\n    \"Rock\",\r\n    \"Water\",\r\n  ];\r\n  // Set state for type checkboxes by using reduce on the pokemonTypes array to turn each type into an object with the type name for the key and false for the value\r\n  const [typeChecked, setTypeChecked] = useState(\r\n    pokemonTypes.reduce(\r\n      (types, acc) => ({\r\n        ...types,\r\n        [acc]: false,\r\n      }),\r\n      {}\r\n    )\r\n  );\r\n  // Set state for weaknesses checkboxes by using reduce on the pokemonTypes array to turn each weaknesses into an object with the weaknesses name for the key and false for the value\r\n  const [weaknessesChecked, setWeaknessesChecked] = useState(\r\n    pokemonTypes.reduce(\r\n      (types, acc) => ({\r\n        ...types,\r\n        [acc]: false,\r\n      }),\r\n      {}\r\n    )\r\n  );\r\n\r\n  // Function to fetch list of pokemon & set the pokemonList state to the response data\r\n  const fetchPokemon = async () => {\r\n    const res = await axios.get(\r\n      \"https://raw.githubusercontent.com/Biuni/PokemonGO-Pokedex/master/pokedex.json\"\r\n    );\r\n    setPokemonList(res.data.pokemon);\r\n  };\r\n\r\n  // Function to display search results\r\n  const searchPokemonHandler = (e) => {\r\n    // Prevent default submission behavior (page reload)\r\n    e.preventDefault();\r\n\r\n    // Declare a searchResult variable and assign it to the result of the find method\r\n    const searchResult = pokemonList.find(\r\n      (pokemon) => pokemon.name.toLowerCase() === search.toLowerCase()\r\n    );\r\n\r\n    // If a result was found update the list to only include the result, else re-populate pokemon list\r\n    if (searchResult) {\r\n      setPokemonList([searchResult]);\r\n    } else {\r\n      fetchPokemon();\r\n    }\r\n  };\r\n\r\n  // Function to reset search\r\n  const searchResetHandler = () => {\r\n    // Clear search field\r\n    setSearch(\"\");\r\n    // Re-populate list of pokemon\r\n    fetchPokemon();\r\n  };\r\n\r\n  // Function to filter pokemon\r\n  const filterPokemonHandler = (e) => {\r\n    // Prevent default submission behavior (page reload)\r\n    e.preventDefault();\r\n\r\n    // Initialize a variable to store the types that are true from the typeChecked state\r\n    const typeFilters = [];\r\n    // Loop over the properties in the typeChecked state and add the types that evaluate to true to the typeFilters array\r\n    for (const type in typeChecked) {\r\n      if (typeChecked[type] === true) {\r\n        typeFilters.push(type);\r\n      }\r\n    }\r\n    // Initialize a variable to store the weaknessess that are true from the weaknessesChecked state\r\n    const weaknessesFilters = [];\r\n    // Loop over the properties in the weaknessesChecked state and add the weaknessess that evaluate to true to the weaknessesFilters array\r\n    for (const weaknesses in weaknessesChecked) {\r\n      if (weaknessesChecked[weaknesses] === true) {\r\n        weaknessesFilters.push(weaknesses);\r\n      }\r\n    }\r\n\r\n    // Check that filters exist\r\n    if (typeFilters.length || weaknessesFilters.length) {\r\n      // Function to compare 2 arrays for the same content\r\n      const isSame = (arr1, arr2) =>\r\n        arr1.length === arr2.length &&\r\n        arr1.every((value, idx) => value === arr2[idx]);\r\n\r\n      // Filter the pokemonList to return any pokemon whose types/weaknesses meet the filter requirements\r\n      const filterResults = pokemonList.filter((pokemon) => {\r\n        let res;\r\n        if (typeFilters.length && weaknessesFilters.length) {\r\n          res =\r\n            (isSame(pokemon.type.sort(), typeFilters.sort()),\r\n            isSame(pokemon.weaknesses.sort(), weaknessesFilters.sort()));\r\n        } else if (typeFilters.length && !weaknessesFilters.length) {\r\n          res = isSame(pokemon.type.sort(), typeFilters.sort());\r\n        } else if (!typeFilters.length && weaknessesFilters.length) {\r\n          res = isSame(pokemon.weaknesses.sort(), weaknessesFilters.sort());\r\n        }\r\n        return res;\r\n      });\r\n\r\n      // Update list to show filter results if any exist\r\n      if (filterResults.length) {\r\n        setFilteredPokemonList(filterResults);\r\n      } else {\r\n        fetchPokemon();\r\n      }\r\n    } else {\r\n      setFilteredPokemonList([]);\r\n    }\r\n  };\r\n\r\n  // Function to handle type filter checkbox changes\r\n  const typeCheckboxHandler = (e) => {\r\n    // Set typeChecked state to maintain all of it's current values except where the key is equal to e.target.name, in which case it will toggle the value\r\n    setTypeChecked({\r\n      ...typeChecked,\r\n      [e.target.name]: !typeChecked[e.target.name],\r\n    });\r\n  };\r\n\r\n  // Function to handle type filter checkbox changes\r\n  const weaknessesCheckboxHandler = (e) => {\r\n    // Set typeChecked state to maintain all of it's current values except where the key is equal to e.target.name, in which case it will toggle the value\r\n    setWeaknessesChecked({\r\n      ...weaknessesChecked,\r\n      [e.target.name]: !weaknessesChecked[e.target.name],\r\n    });\r\n  };\r\n\r\n  // If the pokemonList state is an empty array, run the fetchPokemon function\r\n  useEffect(() => {\r\n    if (!pokemonList.length) {\r\n      fetchPokemon();\r\n    }\r\n  }, [pokemonList]);\r\n  return (\r\n    <>\r\n      <h3>Search by Pokemon Name</h3>\r\n      <Form onSubmit={searchPokemonHandler}>\r\n        <Row>\r\n          <Col>\r\n            <Form.Group controlId=\"formSearch\">\r\n              <Form.Label>Pokemon Name</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Enter Pokemon Name...\"\r\n                onChange={(e) => setSearch(e.target.value)}\r\n                value={search}\r\n              />\r\n            </Form.Group>\r\n          </Col>\r\n\r\n          <Button variant=\"primary\" type=\"submit\">\r\n            Search\r\n          </Button>\r\n\r\n          <Button variant=\"primary\" type=\"button\" onClick={searchResetHandler}>\r\n            Reset\r\n          </Button>\r\n        </Row>\r\n      </Form>\r\n\r\n      <Row>\r\n        <Col>\r\n          <h3>Filter Pokemon Type</h3>\r\n          <Form onSubmit={filterPokemonHandler}>\r\n            <Form.Group controlId=\"formTypeFilterCheckbox\">\r\n              <Form.Label>Type: </Form.Label>\r\n              {pokemonTypes.map((type, idx) => (\r\n                <Form.Check\r\n                  key={idx}\r\n                  type=\"checkbox\"\r\n                  label={type}\r\n                  name={type}\r\n                  checked={typeChecked[type]}\r\n                  onChange={typeCheckboxHandler}\r\n                />\r\n              ))}\r\n            </Form.Group>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              Apply Filter\r\n            </Button>\r\n          </Form>\r\n        </Col>\r\n        <Col>\r\n          <h3>Filter Pokemon Weaknesses</h3>\r\n          <Form onSubmit={filterPokemonHandler}>\r\n            <Form.Group controlId=\"formWeaknessesFilterCheckbox\">\r\n              <Form.Label>Weaknesses: </Form.Label>\r\n              {pokemonTypes.map((type, idx) => (\r\n                <Form.Check\r\n                  key={idx}\r\n                  type=\"checkbox\"\r\n                  label={type}\r\n                  name={type}\r\n                  checked={weaknessesChecked[type]}\r\n                  onChange={weaknessesCheckboxHandler}\r\n                />\r\n              ))}\r\n            </Form.Group>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              Apply Filter\r\n            </Button>\r\n          </Form>\r\n        </Col>\r\n      </Row>\r\n\r\n      <List\r\n        pokemonList={\r\n          filteredPokemonList.length ? filteredPokemonList : pokemonList\r\n        }\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n"]},"metadata":{},"sourceType":"module"}